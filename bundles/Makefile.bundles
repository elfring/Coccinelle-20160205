MARKER=$(PACKAGE_DIR)/.marker

OCAMLFLAGS+=-I $(SRC_DIR)
OCAMLC_CMD= \
	$(OCAMLC) $(OCAMLCFLAGS) $(OCAMLFLAGS) \
	$(patsubst %,-custom -cclib -l%_stubs,$(LIBRARY)) \
	$(EXTRACFLAGS)
OCAMLOPT_CMD= \
	$(OCAMLOPT) $(OCAMLOPTFLAGS) $(OCAMLFLAGS) \
	$(patsubst %,-cclib -l%_stubs,$(LIBRARY)) \
	$(EXTRACFLAGS)
OCAMLMKLIB_CMD=$(OCAMLMKLIB) -linkall $(EXTRALNKFLAGS)
OCAMLDEP_CMD=$(OCAMLDEP) $(OCAMLDEPFLAGS) $(OCAMLFLAGS)

OCAMLCCFLAGS+=-ccopt -fPIC

SIDEPRODUCTS+= \
	$(INTERFACES:=.cmi) \
	$(patsubst %,lib%_stubs.a,$(LIBRARY))

all: depend
	@$(MAKE) all-build
all-build: all-build-targets $(OTHERS)
all-build-targets: \
	$(patsubst %,$(SRC_DIR)/%.cma,$(ARCHIVE)) \
	$(patsubst %,$(SRC_DIR)/%,$(SIDEPRODUCTS)) \
	$(patsubst %,$(SRC_DIR)/%,$(SIDEPRODUCTS_BYTECODE))
	cp $^ .
	- if [ -n "$(LIBRARY)" ]; then \
	  cp $(patsubst %,$(SRC_DIR)/dll%_stubs.so,$(LIBRARY)) .; \
	fi

all.opt: depend
	@$(MAKE) all-opt-build
all-opt-build: all-opt-build-targets $(OTHERS)
all-opt-build-targets: \
	$(patsubst %,$(SRC_DIR)/%.cmxa,$(ARCHIVE)) \
	$(patsubst %,$(SRC_DIR)/%.cmx,$(INTERFACES)) \
	$(patsubst %,$(SRC_DIR)/%.a,$(LIBRARY)) \
	$(patsubst %,$(SRC_DIR)/%,$(SIDEPRODUCTS)) \
	$(patsubst %,$(SRC_DIR)/%,$(SIDEPRODUCTS_NATIVE))
	cp $^ .
	- if [ -n "$(LIBRARY)" ]; then \
	  cp $(patsubst %,$(SRC_DIR)/dll%_stubs.so,$(LIBRARY)) .; \
	fi

clean:
	rm -f .depend $(ARCHIVE:=.cma) $(ARCHIVE:=.cmxa) \
		$(SIDEPRODUCTS) $(SIDEPRODUCTS_NATIVE) \
		$(SIDEPRODUCTS_BYTECODE) \
		$(INTERFACES:=.cmx) $(LIBRARY:=.a) $(CLEANOTHERS) \
		$(patsubst %,$(SRC_DIR)/%.ml,$(PRODUCTS)) $(OTHERS) \
		$(patsubst %,dll%_stubs.so,$(LIBRARY)) \
		$(patsubst %,$(SRC_DIR)/%.cmi,$(MODULES)) \
		$(patsubst %,$(SRC_DIR)/%.cmx,$(MODULES)) \
		$(patsubst %,$(SRC_DIR)/%.cmo,$(MODULES)) \
		$(patsubst %,$(SRC_DIR)/%.cmt,$(MODULES)) \
		$(patsubst %,$(SRC_DIR)/%.cmti,$(MODULES))

depend: .depend

.depend: .prepare $(patsubst %,$(SRC_DIR)/%.ml,$(PRODUCTS))
	$(OCAMLDEP_CMD) $(SRC_DIR)/*.ml $(SRC_DIR)/*.mli >.depend

.PHONY: \
	all all-build all-build-targets all.opt all-opt-build \
	all-opt-build-targets clean distclean depend

$(MARKER): $(TARBALL)
	$(TAR) xfz $<
	touch $@

$(TARBALL):
	@echo \
"$@ not found. Please download it and drop it in this directory ($(pwd))."
	@false

$(SRC_DIR)/$(ARCHIVE).cma: $(patsubst %,$(SRC_DIR)/%.cmo,$(OBJS))
	$(OCAMLC_CMD) -a $^ -o $@

$(SRC_DIR)/$(ARCHIVE).cmxa: $(patsubst %,$(SRC_DIR)/%.cmx,$(OBJS))
	$(OCAMLOPT_CMD) -a $^ -o $@

$(SRC_DIR)/$(LIBRARY).a \
$(SRC_DIR)/dll$(LIBRARY)_stubs.so \
$(SRC_DIR)/lib$(LIBRARY)_stubs.a: \
	$(patsubst %,$(SRC_DIR)/%_stubs.o,$(C_OBJS))
	$(OCAMLMKLIB_CMD) -o $(SRC_DIR)/$(LIBRARY)_stubs $^

$(SRC_DIR)/$(LIBRARY).a \
$(SRC_DIR)/dll$(LIBRARY)_stubs.so: $(SRC_DIR)/lib$(LIBRARY)_stubs.a

%.ml: %.mll .prepare
	$(OCAMLLEX) $< -o $@

%.ml: %.mly
	$(OCAMLYACC) $<

%.cmi: %.mli
	$(OCAMLC_CMD) -c $< -o $@

%.cmo: %.ml
	$(OCAMLC_CMD) $(OCAML_BUNDLES_FLAGS) -c $< -o $@

%.cmx: %.ml
	$(OCAMLOPT_CMD) $(OCAML_BUNDLES_FLAGS) -c $< -o $@

define bundle_without_mli
ifeq ($(wildcard $(SRC_DIR)/$(SOURCE).mli),)
ifeq ($(OCAMLOPT),)
$(SRC_DIR)/$(SOURCE).cmi: $(SRC_DIR)/$(SOURCE).cmo
else
$(SRC_DIR)/$(SOURCE).cmo: $(SRC_DIR)/$(SOURCE).cmx
$(SRC_DIR)/$(SOURCE).cmi: $(SRC_DIR)/$(SOURCE).cmx
endif
endif
endef

$(foreach SOURCE,$(MODULES),$(eval $(bundle_without_mli)))
$(foreach SOURCE,$(MENHIRLIB_MODULES),$(eval $(bundle_without_mli)))


%.o: %.c
	$(OCAMLC_CMD) $(OCAMLCCFLAGS) $< -o $@
# Workaround for what looks like a bug with object compilation...
	- mv $(notdir $@) $@

ifneq ($(MAKECMDGOALS),distclean)
include ../../Makefile.config
include $(adjusted_build_parameters)
-include ../../Makefile.local
endif

ifeq ($(MAKECMDGOALS),all-build)
include .depend
endif

ifeq ($(MAKECMDGOALS),all-opt-build)
include .depend
endif
